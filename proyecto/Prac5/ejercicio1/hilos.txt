#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>

struct jugador{
    int dorsal;
    int eficTiro;
    int eficRebote;
    int puntos;
};

enum estadoBalon_t{POSESION, ENAIRE};

#define MAXREBOTE 70
#define NJUGADORES 4
#define MAXPUNTOS 10
enum estadoBalon_t balon;
int dificultadRebote = 0;

struct jugador jugadores[NJUGADORES] = {
    {0,30,MAXREBOTE, 0},
    {1, 80, 20 , 0},
    {2, 40 , MAXREBOTE, 0},
    {3, 50 , 50, 0}
};
//---------------------------------------> B

int finished = 0;
int difRebote;
pthread_mutex_t m = PTHREAD_MUTEX_INITIALIZER;
pthread_cond_t condvar = PTHREAD_COND_INITIALIZER;

void correr() {
    usleep(100);
}

void rebotear(struct jugador *j )
{
    pthread_mutex_lock(&m);

    while( (balon == ENAIRE && dificultadRebote > j->eficRebote)){
        pthread_cond_wait(&condvar, &m);
    }
    balon = POSESION;

    pthread_mutex_unlock(&m);
}

void tirar(struct jugador *j ) {
    pthread_mutex_lock(&m);
    int difTiro;
    difTiro = rand() % 100;
    if(difTiro < j->eficTiro){
        j->puntos+=2;
        if(j->puntos >= MAXPUNTOS){
        finished = 1;
        }
    }
    else{
        dificultadRebote = rand() % MAXREBOTE;
        balon = ENAIRE;
    }
    pthread_cond_broadcast(&condvar);
    pthread_mutex_unlock(&m);
}

void* jugadorInit(void* arg){
	struct jugador *j = (struct jugador *) arg;
    while (!finished) {
        rebotear(j);
        correr();
        tirar(j);
        correr();
    }
}

int main(int argc, char const *argv[])
{
    pthread_t threads[NJUGADORES];
    for(int i = 0; i < NJUGADORES; i++){
        pthread_create(&threads[i], NULL, jugadorInit, &jugadores[i]);
    }
    for(int h = 0; h < NJUGADORES; h++){
        pthread_join(threads[h], NULL);
    }

    for(int l = 0; l < NJUGADORES; l++){
        printf("El jugador con dorsal %d, ha anotado %d puntos\n", jugadores[l].dorsal ,jugadores[l].puntos);
    }
    
    return 0;
}






#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <string.h>
#include <pthread.h>

pthread_mutex_t file_mutex = PTHREAD_MUTEX_INITIALIZER;

struct thread_args {
    int id;
    int fd;
};

void *escribirA(void *arg) {
    struct thread_args *args = (struct thread_args *)arg;
    printf("Número de hilo: %d \n", args->id);
    return NULL;
}

void *escribirB(void *arg) {
    struct thread_args *args = (struct thread_args *)arg;
    int fd = open("output.txt", O_WRONLY);
    if (fd < 0) {
        perror("Error opening file");
        return NULL;
    }

    char buffer[6];
    for (int i = 0; i < 5; i++) {
        buffer[i] = '0' + args->id;
    }
    buffer[5] = '\0';

    lseek(fd, args->id * 5, SEEK_SET);
    write(fd, buffer, 5);

    close(fd);
    return NULL;
}

void *escribirC(void *arg) {
    struct thread_args *args = (struct thread_args *)arg;

    char buffer[6];
    for (int i = 0; i < 5; i++) {
        buffer[i] = '0' + args->id;
    }
    buffer[5] = '\0';

    pthread_mutex_lock(&file_mutex);

    lseek(args->fd, args->id * 5, SEEK_SET);
    write(args->fd, buffer, 5);

    pthread_mutex_unlock(&file_mutex);
    return NULL;
}

int main(void) {
    int fd = open("output.txt", O_CREAT | O_TRUNC | O_RDWR, S_IRUSR | S_IWUSR);
    if (fd < 0) {
        perror("Error creating file");
        return 1;
    }

    pthread_t threads[10];
    struct thread_args args[10];

    for (int i = 0; i < 10; i++) {
        args[i].id = i;
        args[i].fd = fd;
        pthread_create(&threads[i], NULL, escribirC, &args[i]);
    }

    for (int i = 0; i < 10; i++) {
        pthread_join(threads[i], NULL);
    }

    // Ponemos el puntero al inicio del fichero
    lseek(fd, 0, SEEK_SET);

    char c;
    printf("File contents are:\n");
    while (read(fd, &c, 1) > 0) {
        printf("%c", (char)c);
    }
    printf("\n");

    close(fd);
    return 0;
}






#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>
#include <string.h>

typedef struct thread_data {
    char* name;
    int num_id;
    int order;
} thread_data_t;

pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
pthread_cond_t cond = PTHREAD_COND_INITIALIZER;

int execution_order = 1;
int completed_A = 0;
int completed_B = 0;
int completed_C = 0;
int completed_D = 0;
int completed_E = 0;

void* fun(void* arg) {
    thread_data_t* data = (thread_data_t*)arg;

    // Ejecutar sleep() fuera de la sección crítica
    int sleep_time = rand() % 3 + 1;
    sleep(sleep_time);

    // Bloquear la sección crítica para verificar y actualizar las condiciones
    pthread_mutex_lock(&mutex);

   if (strcmp(data->name, "C") == 0) {
        while (!completed_A) {
            pthread_cond_wait(&cond, &mutex);
        }
    } else if (strcmp(data->name, "D") == 0) {
        while (!completed_A || !completed_B) {
            pthread_cond_wait(&cond, &mutex);
        }
    } else if (strcmp(data->name, "E") == 0) {
        while (!completed_B) {
            pthread_cond_wait(&cond, &mutex);
        }
    } else if (strcmp(data->name, "F") == 0) {
        while (!completed_C || !completed_D) {
            pthread_cond_wait(&cond, &mutex);
        }
    } else if (strcmp(data->name, "G") == 0) {
        while (!completed_E) {
            pthread_cond_wait(&cond, &mutex);
        }
    }

    // Imprimir el mensaje fuera de la sección crítica
    pthread_mutex_unlock(&mutex);
    printf("Hilo %s con id %d\n", data->name, data->num_id);
    
    // Bloquear la sección crítica para actualizar el estado y broadcast
    pthread_mutex_lock(&mutex);
    data->order = execution_order++;

    if (strcmp(data->name, "A") == 0) {
        completed_A = 1;
    } else if (strcmp(data->name, "B") == 0) {
        completed_B = 1;
    } else if (strcmp(data->name, "C") == 0) {
        completed_C = 1;
    } else if (strcmp(data->name, "D") == 0) {
        completed_D = 1;
    } else if (strcmp(data->name, "E") == 0) {
        completed_E = 1;
    }

    pthread_cond_broadcast(&cond);
    pthread_mutex_unlock(&mutex);

    return NULL;
}

void read_names_from_file(char* filename, char* names[], int num_names) {
    FILE* file = fopen(filename, "r");
    if (file == NULL) {
        perror("Error opening file");
        exit(EXIT_FAILURE);
    }

    char line[100];
    for (int i = 0; i < num_names && fgets(line, sizeof(line), file); i++) {
        line[strcspn(line, "\n")] = '\0'; // Remove newline character
        names[i] = strdup(line);
    }

    fclose(file);
}

int main(int argc, char* argv[]) {
    if (argc < 2) {
        fprintf(stderr, "Usage: %s <names_file>\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    pthread_t threads[7];
    thread_data_t thread_data[7];
    // char* names[7] = {"A", "B", "C", "D", "E", "F", "G"};
    char* names[7];
    
    read_names_from_file(argv[1], names, 7);

    for (int i = 0; i < 7; i++) {
        thread_data[i].name = names[i];
        thread_data[i].num_id = i + 1;
        thread_data[i].order = 0;
        pthread_create(&threads[i], NULL, fun, (void*)&thread_data[i]);
    }

    for (int i = 0; i < 7; i++) {
        pthread_join(threads[i], NULL);
    }

    // Imprimir el orden de terminación según el num_id
    for (int i = 0; i < 7; i++) {
        printf("%s(%d)", thread_data[i].name, thread_data[i].order);
        if (i < 6) printf("-");
    }
    printf("\n");

    // Liberar la memoria de los nombres
    for (int i = 0; i < 7; i++) {
        free(names[i]);
    }

    return 0;
}




#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>

#define MAXCORREDORES 10

pthread_mutex_t m = PTHREAD_MUTEX_INITIALIZER;
pthread_cond_t condvarPrepararse = PTHREAD_COND_INITIALIZER;
pthread_cond_t condvarCarrera = PTHREAD_COND_INITIALIZER;

int turnoActual = 0;
int esperando = 0;
int posicion = 0;

void change_clothes(int id);
int get_position(int id);
void move_position(int id, int d);
void wait_all_ready(int id);
void wait_my_turn(int id, int pos);
void run(int id, int pos);
void pass_on_relay(int id);

void *thmain(void *arg)
{
    int id = (int) (long long) arg;
    int pos;
    change_clothes(id);
    pos = get_position(id);
    move_position(id, pos);
    wait_all_ready(id);
    wait_my_turn(id, pos);
    run(id, pos);
    pass_on_relay(id);
    return NULL;
}

void change_clothes(int id){
    printf("Runner %d is changing clothes\n", id);
}

int get_position(int id){
    pthread_mutex_lock(&m);

    int dor = posicion;
    posicion++;

    pthread_mutex_unlock(&m);
    return dor;
}

void move_position(int id, int d){
    pthread_mutex_lock(&m);

    printf("Runner %d reaches its starting position %d\n", id, d);
    esperando++;
    pthread_cond_broadcast(&condvarPrepararse);
    pthread_mutex_unlock(&m);

}

void wait_all_ready(int id){
    pthread_mutex_lock(&m);

    while(esperando < MAXCORREDORES){
        pthread_cond_wait(&condvarPrepararse, &m);
    }

    pthread_mutex_unlock(&m);
}

void wait_my_turn(int id, int pos){
    pthread_mutex_lock(&m);

    while(turnoActual != pos){
        pthread_cond_wait(&condvarCarrera, &m);
    }

    pthread_mutex_unlock(&m);
}

void run(int id, int pos){
    printf("Runner %d is running from position %d\n", id, pos);
}

void pass_on_relay(int id){
    pthread_mutex_lock(&m);

    turnoActual++;
    pthread_cond_broadcast(&condvarCarrera);

    pthread_mutex_unlock(&m);
}

int main(int argc, char const *argv[]) // crea MAXCORREDORES hilos que ejecutan la funcion thmain
{
    pthread_t threads[MAXCORREDORES];

    for(int i = 0; i < MAXCORREDORES; i++){ //crea los hilos con thmain
        pthread_create(&threads[i], NULL, thmain, (void *)(long)i);
    }

    for(int h = 0; h < MAXCORREDORES; h++){// espera a que terminen
        pthread_join(threads[h], NULL);
    }

    return 0;
}

//gcc -pthread -o 2 2.c




#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>

int finA = 0;
int finB = 0;
int finC = 0;
int finD = 0;


pthread_cond_t cB; //finA
pthread_cond_t cC;  //finA
pthread_cond_t cD;  //finB && finC
pthread_cond_t cE;  //finD && finC

pthread_mutex_t m;


void A();
void B();
void C();
void D();
void E();

int main(int argc, char const *argv[])
{
    pthread_t threads[5];

    pthread_create(&threads[0], NULL, A, NULL);
    pthread_create(&threads[1], NULL, B, NULL);
    pthread_create(&threads[2], NULL, C, NULL);
    pthread_create(&threads[3], NULL, D, NULL);
    pthread_create(&threads[4], NULL, E, NULL);

    for(int i = 0; i < 5; i++){
        pthread_join(threads[i], NULL);
    }

    return 0;
}

void A(){
    printf("Soy el hilo A\n");
    pthread_mutex_lock(&m);

    finA = 1;
    pthread_cond_signal(&cB);
    pthread_cond_signal(&cC);

    pthread_mutex_unlock(&m);

}

void B(){
    pthread_mutex_lock(&m);

    while(!finA){
        pthread_cond_wait(&cB, &m);
    }
    pthread_mutex_unlock(&m);

    printf("Soy el hilo B\n");


    pthread_mutex_lock(&m);

    finB = 1;
    pthread_cond_signal(&cD);

    pthread_mutex_unlock(&m);

}
void C(){
    pthread_mutex_lock(&m);

    while(!finA){
        pthread_cond_wait(&cC, &m);
    }
    pthread_mutex_unlock(&m);

    printf("Soy el hilo C\n");


    pthread_mutex_lock(&m);

    finC = 1;
    pthread_cond_signal(&cD);
    pthread_cond_signal(&cE);


    pthread_mutex_unlock(&m);
}
void D(){
    pthread_mutex_lock(&m);

    while(!finB || !finC){
        pthread_cond_wait(&cD, &m);
    }
    pthread_mutex_unlock(&m);

    printf("Soy el hilo D\n");


    pthread_mutex_lock(&m);

    finD = 1;
    pthread_cond_signal(&cE);

    pthread_mutex_unlock(&m);

}

void E(){
    pthread_mutex_lock(&m);

    while(!finD || !finC){
        pthread_cond_wait(&cE, &m);
    }
    pthread_mutex_unlock(&m);

    printf("Soy el hilo E\n");
}





#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <stdint.h>  // Incluir este header para usar intptr_t

#define NUM_THREADS 5

char shared_array[NUM_THREADS];
int current_index = 0;
pthread_mutex_t m;
pthread_cond_t cB, cC, cD, cE;

void* A(void* arg);
void* B(void* arg);
void* C(void* arg);
void* D(void* arg);
void* E(void* arg);

int main() {
    pthread_t threads[NUM_THREADS];

    pthread_mutex_init(&m, NULL);
    pthread_cond_init(&cB, NULL);
    pthread_cond_init(&cC, NULL);
    pthread_cond_init(&cD, NULL);
    pthread_cond_init(&cE, NULL);

    pthread_create(&threads[0], NULL, A, (void*)(intptr_t)'A');
    pthread_create(&threads[1], NULL, B, (void*)(intptr_t)'B');
    pthread_create(&threads[2], NULL, C, (void*)(intptr_t)'C');
    pthread_create(&threads[3], NULL, D, (void*)(intptr_t)'D');
    pthread_create(&threads[4], NULL, E, (void*)(intptr_t)'E');

    for (int i = 0; i < NUM_THREADS; i++) {
        pthread_join(threads[i], NULL);
    }

    printf("Contenido del array compartido: ");
    for (int i = 0; i < NUM_THREADS; i++) {
        printf("%c ", shared_array[i]);
    }
    printf("\n");

    pthread_mutex_destroy(&m);
    pthread_cond_destroy(&cB);
    pthread_cond_destroy(&cC);
    pthread_cond_destroy(&cD);
    pthread_cond_destroy(&cE);

    return 0;
}

void write_to_shared_array(char id) {
    pthread_mutex_lock(&m);
    shared_array[current_index] = id;
    current_index++;
    pthread_mutex_unlock(&m);
}

void* A(void* arg) {
    char id = (char)(intptr_t)arg;
    printf("Soy el hilo %c\n", id);
    write_to_shared_array(id);

    pthread_mutex_lock(&m);
    pthread_cond_signal(&cB);
    pthread_cond_signal(&cC);
    pthread_mutex_unlock(&m);

    return NULL;
}

void* B(void* arg) {
    char id = (char)(intptr_t)arg;

    pthread_mutex_lock(&m);
    while (current_index < 1) {
        pthread_cond_wait(&cB, &m);
    }
    pthread_mutex_unlock(&m);

    printf("Soy el hilo %c\n", id);
    write_to_shared_array(id);

    pthread_mutex_lock(&m);
    pthread_cond_signal(&cD);
    pthread_mutex_unlock(&m);

    return NULL;
}

void* C(void* arg) {
    char id = (char)(intptr_t)arg;

    pthread_mutex_lock(&m);
    while (current_index < 1) {
        pthread_cond_wait(&cC, &m);
    }
    pthread_mutex_unlock(&m);

    printf("Soy el hilo %c\n", id);
    write_to_shared_array(id);

    pthread_mutex_lock(&m);
    pthread_cond_signal(&cD);
    pthread_cond_signal(&cE);
    pthread_mutex_unlock(&m);

    return NULL;
}

void* D(void* arg) {
    char id = (char)(intptr_t)arg;

    pthread_mutex_lock(&m);
    while (current_index < 3) {  // Espera a que B y C se ejecuten
        pthread_cond_wait(&cD, &m);
    }
    pthread_mutex_unlock(&m);

    printf("Soy el hilo %c\n", id);
    write_to_shared_array(id);

    pthread_mutex_lock(&m);
    pthread_cond_signal(&cE);
    pthread_mutex_unlock(&m);

    return NULL;
}

void* E(void* arg) {
    char id = (char)(intptr_t)arg;

    pthread_mutex_lock(&m);
    while (current_index < 4) {  // Espera a que D se ejecute
        pthread_cond_wait(&cE, &m);
    }
    pthread_mutex_unlock(&m);

    printf("Soy el hilo %c\n", id);
    write_to_shared_array(id);

    return NULL;
}
